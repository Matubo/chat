{"version":3,"sources":["query/chatQuery.js","store/saga.js","store/store.js","component/LoginForm.js","component/ChatList.js","component/ConnectToChatField.js","component/MessageBox.js","assets/img/send.png","component/TextInput.js","App.js","reportWebVitals.js","index.js"],"names":["socket","io","send_message_query","room","message","emit","join_to_room_query","roomNumber","on","username","store","dispatch","type","accept_change_username","accept_join_to_room","set_room","new_message_on_room","send_message","chatSaga","currentRoomsState","rooms","currentRoomState","currentRoomIDState","roomID","change_username","change_username_query","data","put","authorized","join_to_room","select","currentRooms","undefined","find","item","number","push","newRoomsArray","slice","targetRoom","messages","currentRoom","i","length","get_new_room","action","takeLatest","sagaMiddleware","createSagaMiddleware","createStore","state","applyMiddleware","run","saga","LoginForm","props","setUsername","useState","changeUsername","className","value","onChange","e","target","onClick","Chats","setRoom","roomsDOM","map","elem","index","ConnectToChatField","getNewRoom","connectToRoom","chatNumber","setChatNumber","maxLength","MessageBox","messagesDOM","date","TextInput","sendMessage","changeMessage","onKeyDown","keyCode","stopPropagation","src","send","alt","connect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1f4a12f.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\nimport store from \"../store/store\";\r\n\r\n/* const SERVER_URL = \"http://localhost:3001\"; */\r\nconst socket = io();\r\n\r\nconst send_message_query = function (room, message) {\r\n  //отправка нового сообщения\r\n  socket.emit(\"message_to_room\", room, message);\r\n};\r\n\r\nconst change_username_query = function (username) {\r\n  //запрос установки имени пользователя\r\n  socket.emit(\"change_username\", username);\r\n};\r\n\r\nconst join_to_room_query = function (roomNumber) {\r\n  //запрос на подключение к комнате\r\n  socket.emit(\"join_to_room\", roomNumber);\r\n};\r\n\r\nsocket.on(\"accept_change_username\", (username) => {\r\n  //подтверждение установки имени пользователя\r\n  store.dispatch({ type: \"accept_change_username\", username: username });\r\n});\r\n\r\nsocket.on(\"new_message_on_room\", (room) => {\r\n  //сообщение о новом сообщении в комнате\r\n  store.dispatch({ type: \"new_message_on_room\", room: room });\r\n});\r\n\r\nsocket.on(\"accept_join_to_room\", (room) => {\r\n  //подтверждение подключения к комнате\r\n  store.dispatch({\r\n    type: \"accept_join_to_room\",\r\n    room: room,\r\n  });\r\n});\r\n\r\nexport { send_message_query, change_username_query, join_to_room_query };\r\n","import { select, put, takeLatest } from \"@redux-saga/core/effects\";\r\nimport {\r\n  send_message_query,\r\n  change_username_query,\r\n  join_to_room_query,\r\n} from \"../query/chatQuery\";\r\n\r\nconst currentRoomsState = (store) => store.rooms;\r\nconst currentRoomState = (store) => store.room;\r\nconst currentRoomIDState = (store) => store.roomID;\r\n//обработчик запроса на изменение имени пользователя\r\nfunction change_username(username) {\r\n  change_username_query(username);\r\n}\r\n//обработчик подтверждения смены имени пользователя\r\nfunction* accept_change_username(data) {\r\n  let username = data.username;\r\n  yield put({ type: \"set_username\", username: username, authorized: true });\r\n}\r\n//обработчик запроса на присоединение к комнате\r\nfunction join_to_room(data) {\r\n  let roomNumber = data.roomNumber;\r\n  join_to_room_query(roomNumber);\r\n}\r\n//обработчик подтверждения подключения к комнате\r\nfunction* accept_join_to_room(data) {\r\n  const { room } = data;\r\n  let currentRooms = yield select(currentRoomsState);\r\n  let inStore = currentRooms.find((item) => item.number == room.number);\r\n  if (inStore == undefined) {\r\n    currentRooms.push(room);\r\n    let newRoomsArray = currentRooms.slice(0);\r\n    yield put({ type: \"set_new_rooms\", rooms: newRoomsArray });\r\n    let currentRoomID = yield select(currentRoomIDState);\r\n    if (currentRoomID == null) {\r\n      yield put({ type: \"set_room\", roomID: 0 });\r\n    }\r\n  }\r\n}\r\n//обработчик переключения комнаты\r\nfunction* set_room(data) {\r\n  const { roomID } = data;\r\n  let currentRoomID = yield select(currentRoomIDState);\r\n  if (currentRoomID != roomID) {\r\n    let currentRooms = yield select(currentRoomsState);\r\n    let targetRoom = currentRooms[roomID];\r\n    yield put({\r\n      type: \"set_main_data\",\r\n      roomID: roomID,\r\n      messages: targetRoom.messages,\r\n      room: targetRoom.number,\r\n    });\r\n  }\r\n}\r\n//обработчик прихода новых сообщений\r\nfunction* new_message_on_room(data) {\r\n  let room = data.room;\r\n  let rooms = yield select(currentRoomsState);\r\n  let currentRoom = yield select(currentRoomState);\r\n  for (let i = 0; i < rooms.length; i++) {\r\n    if (rooms[i].number == room.number) {\r\n      rooms[i].messages = room.messages;\r\n      yield put({ type: \"set_new_rooms\", rooms: rooms });\r\n      if (currentRoom == room.number) {\r\n        yield put({ type: \"set_messages\", messages: room.messages });\r\n      }\r\n    }\r\n  }\r\n}\r\n//обработчик отправки сообщения\r\nfunction* send_message(data) {\r\n  let message = data.message;\r\n  let room = yield select(currentRoomState);\r\n  send_message_query(room, message);\r\n}\r\n//обработчик запроса новой комнаты\r\nfunction get_new_room() {\r\n  join_to_room_query();\r\n}\r\n\r\nfunction* chatSaga(action) {\r\n  yield takeLatest(\"change_username\", change_username);\r\n  yield takeLatest(\"accept_change_username\", accept_change_username);\r\n  yield takeLatest(\"join_to_room\", join_to_room);\r\n  yield takeLatest(\"accept_join_to_room\", accept_join_to_room);\r\n  yield takeLatest(\"set_room\", set_room);\r\n  yield takeLatest(\"send_message\", send_message);\r\n  yield takeLatest(\"new_message_on_room\", new_message_on_room);\r\n  yield takeLatest(\"get_new_room\", get_new_room);\r\n}\r\n\r\nexport default chatSaga;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport saga from \"./saga\";\r\n\r\nfunction storeReducer(\r\n  state = {\r\n    username: null,\r\n    rooms: [],\r\n    room: null,\r\n    roomID: null,\r\n    messages: [],\r\n    authorized: false,\r\n  },\r\n  action\r\n) {\r\n  if (action.type == \"set_username\") {\r\n    return {\r\n      ...state,\r\n      username: action.username,\r\n      authorized: true,\r\n    };\r\n  }\r\n\r\n  if (action.type == \"set_new_rooms\") {\r\n    return {\r\n      ...state,\r\n      rooms: action.rooms,\r\n    };\r\n  }\r\n\r\n  if (action.type == \"set_main_data\") {\r\n    return {\r\n      ...state,\r\n      room: action.room,\r\n      messages: action.messages,\r\n      roomID: action.roomID,\r\n    };\r\n  }\r\n\r\n  if (action.type == \"set_messages\") {\r\n    return {\r\n      ...state,\r\n      messages: action.messages,\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(storeReducer, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(saga);\r\n\r\nexport default store;\r\n","import { useState } from \"react\";\r\nimport \"./LoginForm.css\";\r\n\r\nfunction LoginForm(props) {\r\n  const { setUsername } = props;\r\n  const [username, changeUsername] = useState(\"\");\r\n  return (\r\n    <div className=\"login-form\">\r\n      <p className=\"login-form_heading\">Введите логин:</p>\r\n      <input\r\n        type=\"text\"\r\n        className=\"login-form_username\"\r\n        value={username}\r\n        onChange={(e) => changeUsername(e.target.value)}\r\n      ></input>\r\n      <button\r\n        className=\"login-form_login\"\r\n        onClick={() => {\r\n          setUsername(username);\r\n        }}\r\n      >\r\n        Войти\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n","function Chats(props) {\r\n  const { rooms, setRoom } = props;\r\n  function roomsHandler(room) {\r\n    setRoom(room);\r\n  }\r\n  let roomsDOM = rooms.map((elem, index) => {\r\n    return (\r\n      <button\r\n        key={index * elem.number}\r\n        onClick={() => {\r\n          roomsHandler(index);\r\n        }}\r\n      >\r\n        {elem.number}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div className=\"chats\">{roomsDOM}</div>;\r\n}\r\n\r\nexport default Chats;\r\n","import { useState } from \"react\";\r\n\r\nfunction ConnectToChatField(props) {\r\n  const { getNewRoom, connectToRoom } = props;\r\n  const [chatNumber, setChatNumber] = useState(\"\");\r\n  function changeNumber(value) {\r\n    setChatNumber(value);\r\n  }\r\n  function connect() {\r\n    connectToRoom(chatNumber);\r\n  }\r\n  return (\r\n    <div className=\"connect-to-chat\">\r\n      <input\r\n        className=\"input connect-to-chat_input\"\r\n        type=\"number\"\r\n        maxLength={10}\r\n        value={chatNumber}\r\n        onChange={(e) => changeNumber(e.target.value)}\r\n      ></input>\r\n      <button className=\"connect-to-chat_connect-button\" onClick={connect}>\r\n        Подключиться\r\n      </button>\r\n      <button className=\"connect-to-chat_new-button\" onClick={getNewRoom}>\r\n        Создать\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConnectToChatField;\r\n","import \"./MessageBox.css\";\r\n\r\nfunction MessageBox(props) {\r\n  const { messages } = props;\r\n\r\n  let messagesDOM = messages.map((elem) => {\r\n    return (\r\n      <div className=\"message-box\">\r\n        <p className=\"message-box_username\">{`${elem.username} `}</p>\r\n        <p className=\"message-box_message\">{elem.message}</p>\r\n        <p className=\"message-box_date\">{elem.date}</p>\r\n      </div>\r\n    );\r\n  });\r\n  return <div className=\"list-of-messages\">{messagesDOM}</div>;\r\n}\r\n\r\nexport default MessageBox;\r\n","export default __webpack_public_path__ + \"static/media/send.93ce65ce.png\";","import { useState } from \"react\";\r\nimport send from \"../assets/img/send.png\";\r\nimport \"./TextInput.css\";\r\n\r\nfunction TextInput(props) {\r\n  const { sendMessage } = props;\r\n  const [message, changeMessage] = useState(\"\");\r\n\r\n  const buttonHandler = (e) => {\r\n    sendMessage(message);\r\n    changeMessage(\"\");\r\n    e.stopPropagation();\r\n  };\r\n\r\n  const onKeyPressHandler = (e) => {\r\n    if (e.keyCode === 13) {\r\n      sendMessage(message);\r\n      changeMessage(\"\");\r\n      e.stopPropagation();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-input\">\r\n      <textarea\r\n        className=\"input text-input_message-form\"\r\n        maxLength={340}\r\n        value={message}\r\n        onChange={(e) => changeMessage(e.target.value)}\r\n        onKeyDown={onKeyPressHandler}\r\n      ></textarea>\r\n      <button className=\"button text-input_send-button\" onClick={buttonHandler}>\r\n        <img src={send} className=\"text-input_send-button_img\" alt=\"#\"></img>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n","import { connect } from \"react-redux\";\r\nimport LoginForm from \"./component/LoginForm\";\r\nimport Chats from \"./component/ChatList\";\r\nimport ConnectToChatField from \"./component/ConnectToChatField\";\r\nimport MessageBox from \"./component/MessageBox\";\r\nimport TextInput from \"./component/TextInput\";\r\nimport \"./App.css\";\r\n\r\nfunction App(props) {\r\n  const {\r\n    authorized,\r\n    rooms,\r\n    messages,\r\n    setUsername,\r\n    sendMessage,\r\n    setRoom,\r\n    getNewRoom,\r\n    connectToRoom,\r\n  } = props;\r\n\r\n  if (!authorized) {\r\n    return <LoginForm setUsername={setUsername}></LoginForm>;\r\n  } else\r\n    return (\r\n      <div className=\"App\">\r\n        <Chats rooms={rooms} setRoom={setRoom}></Chats>\r\n        <ConnectToChatField\r\n          getNewRoom={getNewRoom}\r\n          connectToRoom={connectToRoom}\r\n        ></ConnectToChatField>\r\n        <MessageBox messages={messages}></MessageBox>\r\n        <TextInput sendMessage={sendMessage}></TextInput>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction stateMap(store) {\r\n  return {\r\n    username: store.username,\r\n    room: store.room,\r\n    rooms: store.rooms,\r\n    messages: store.messages,\r\n    authorized: store.authorized,\r\n  };\r\n}\r\n\r\nfunction dispatchMap(dispatch) {\r\n  return {\r\n    setUsername: (username) =>\r\n      dispatch({ type: \"change_username\", username: username }),\r\n    sendMessage: (message) =>\r\n      dispatch({ type: \"send_message\", message: message }),\r\n    setRoom: (roomID) =>\r\n      dispatch({\r\n        type: \"set_room\",\r\n        roomID: roomID,\r\n      }),\r\n    getNewRoom: () => {\r\n      dispatch({ type: \"get_new_room\" });\r\n    },\r\n    connectToRoom: (roomNumber) => {\r\n      dispatch({ type: \"join_to_room\", roomNumber: roomNumber });\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(stateMap, dispatchMap)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"./store/store\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App store={store} />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}